install.packages("Rcmdr")
library(Rcmdr)
library(ggplot2)
ls
ld
clc
clear
`Business+Analytics+.+Week+7+oj` <- read.csv("~/Documents/Syracuse/Current Classes/Business Analytics/Week 7/Business+Analytics+-+Week+7+oj.csv")
View(`Business+Analytics+.+Week+7+oj`)
names(Business+Analytics+.+Week+7+oj)
names('Business+Analytics+.+Week+7+oj')
oj <- read.csv("~/Documents/Syracuse/Current Classes/Business Analytics/Week 7/Business+Analytics+-+Week+7+oj.csv")
names(oj)
hist(oj[price])
hist(oj.price)
hist(oj["price"])
hist(oj[6])
hist(oj$price)
help hist()
help hist
with(oj, hist(price, FALSE))
with(oj, hist(price, freq = FALSE))
with(oj, boxplot(price))
with(oj, boxplot(price, subset = brand))
with(oj, boxplot(price~brand))
with(oj, scatterplot(price~brand))
with(oj, plot(price, logmove))
with(oj, scatterplot(price~brand))
with(oj, scatter.smooth(price, logmove))
with(oj, scatter.smooth(price, logmove))
with(oj, scatter.smooth(price, logmove, reg.line = lm, spread = TRUE))
warnings()
library(car)
install.packages("car")
library(Rcmdr)
library(Rcmdr)
rinput <- read.csv("~/Documents/Syracuse/Current Classes/Data Analysis and Decision Making/Process Improvement Project/rinput.csv")
View(rinput)
library(Rcmdr)
Dataset <-
Rcmdr+    read.csv("/Users/alex/Documents/Syracuse/Current Classes/Data Analysis and Decision Making/Process Improvement Project/rinput.csv",
Rcmdr+     header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Dataset <-
Rcmdr+    read.csv("/Users/alex/Documents/Syracuse/Current Classes/Data Analysis and Decision Making/Process Improvement Project/rinput.csv",
Rcmdr+,     header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE)
install.packages("rattle")
rattle()
library(rattle)
install.packages("RGtk2")
x <- c(1,2,3,4)
x[-2]
x > 2
x[x>2]
install.packages("rmarkdown")
height <- c(59, 60, 61, 58, 67, 72, 70)
weight <- c(150, 140, 180, 220, 160, 140, 130)
a <- 150
mean(height)
mean(weight)
sum(weight)
sum(weight) / 7
length(height)
length(weight)
sum(height)
sum(height) / length(height)
sum(weight) / length(weight)
help(mean)
maxH <- max(height)
maxW <- max(weight)
minW <- min(weight)
newVec <- weight + 5
newVec / height
if(maxH > 60) print("Yes") else print("no")
if(maxH > 60) print("yes") else print("no")
if(minW > a) print("yes") else print("no")
help(print)
1 + 1 == 2
#This line shows that the the value 1 + 1 is the same as 2
1 + 1 == 2
'Andy' AND 'Andy'
'Andy' & 'Andy'
# The first line is creating a variable "a" that contains 1 + 1
a <- 1+1
# This line is creating a variable "b" that contains 2 + 2
b <- 2 + 2
# The variable "a" is also equal to 2 because 1 + 1 = 2
# The variable "b" is also equal to 4 because 2 + 2 = 4
# The symbol == tests to see if both sides of an expression are equivalent
#For example
a == 2
# The symbol & is a test that will return TRUE if both sides of the & expression are true
# The following example will return true because a = 1 + 1 = 2 AND b = 2 + 2 == 4
a == 2 & b == 4
# The symbol | means OR
The | symbol returns TRUE if at least one of the sides is a true statement
# The | symbol returns TRUE if at least one of the sides is a true statement
# The next statement will ask if the name 'Jack' is the same as the name 'Jill'
'Jack' == 'Jill'
# The next line will ask if the name 'Phil' is the same as the word 'Phil'
'Phil' == 'Phil'
# Finally we will ask if 'Jack' is the same as 'Jill' OR if 'Phil' is the same as 'Phil'
'Jack' == 'Jill' | 'Phil' == 'Phil'
# TRUE is returned because one side of the | is a True statement
# Another example will return false if we ask if Phil is the same as Jack
'Jill' == 'Jack' | 'Phil' == 'Jack'
# Now we will ask if the variable 'a' is the same as 3 and if the variable 'b' is the same as 4
a == 3 & b == 4
# We get a False because only one of the statements are correct
# We will now ask if 'a' is the same as 3 and if b is the same as 5
a == 3 & b == 5
# We once again get a false because both of the statements are false
# Now we will ask if the names 'Jack' == 'Jack' or if 'Jill
# Now we will ask if the name 'Jack' is the same as 'Jack' or if 'Jill' is the same as 'Jill'
'Jack' == 'Jack' | 'Jill' == 'Jill'
# We get the answer True because both statements oneach of the sides of the | is True
# Fianlly we are going to learn about the Not operator
# The ! symbol means NOT
# For Example a != b is asking if a is not the same as b
a != b
# This returns True, because a = 2 and b = 4. These terms are not equal
#If we ask if a != a, we will get a False because we are asking if they are not equal, but in reality they are
a != a
getwd()
setwd("Documents/Syracuse/Financial Analytics")
setwd("Documents/Syracuse/Current Classes/Financial Analytics")
setwd("Books/Financial Analytics Scripts")
CreditCard <- read.csv("data/CreditCard.csv")
str(CreditCard)
head(CreditCard, 3)
summary(CreditCard)
ccard <- CreditCard[CreditCard$age >= 18, ]
hist(ccard$age)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
pvt_table <- filter(ccard, state, %in% 'NY')
pvt_table <- filter(ccard, state %in% "NY")
pvt_table
head(pvt_table)
pvt_table <- group_by(pvt_table, card, owner, selfemp)
pvt_table
options(dplyr.width = Inf)
pvt_table <- summarise(pvt_tablr, income.cv = sd)
pvt_table <- summarise(pvt_table, income.cv = sd(income) / mean(income),
avg.age = mean(age), income.per.dependent = income / dependents)
avg.age = mean(age), income.per.dependent = sum(income) / sum(dependents))
pvt_table <- summarise(pvt_table, income.cv = sd(income) / mean(income),
avg.age = mean(age), income.per.dependent = sum(income) / sum(dependents))
pvt_table
install.packages("utf8")
pvt_table
knitr::kable(pvt_table)
le <- read.csv("life_expectacny.csv", header = TRUE, stringsAsFactors = FALSE)
le <- read.csv("data/life_expectacny.csv", header = TRUE, stringsAsFactors = FALSE)
getwd()
le <- read.csv("data/life_expectacny.csv", header = TRUE, stringsAsFactors = FALSE)
le <- read.csv("data/life_expectancy.csv", header = TRUE, stringsAsFactors = FALSE)
sa <- read.csv("data/sanatation.csv", header = TRUE, stringsAsFactors = FALSE)
sa <- read.csv("data/sanitation_.csv", header = TRUE, stringsAsFactors = FALSE)
head(sa)
merge(le[, c("country", "years.life.expectancy.avg")], sa[, c("country", "sanitation.avg")])
life.sanitation <- merge(le[, c("country", "years.life.expectancy.avg")], sa[, c("country", "sanitation.avg")])
help(merge)
head(life.sanitation)
hp <- read.csv("data/hprice.csv")
head(ph)
head(hp)
pvt_table <- group_by(hp, "Neighborhood")
pvt_table <- summarise(pvt_table, avg.price = sum(Price) / count(ID))
pvt_table <- summarise(pvt_table, avg.price = sum(Price) / length(ID))
pvt_table
pvt_table <- group_by(hp, Neighborhood)
head(pvt_table)
summarise(pvt_table, avg.price = mean(price))
pvt_table <- summarise(pvt_table, avg.price = mean(Price))
pvt_table
pvt_table <- group_by(hp, Neighborhood, Brick, Offers, Bathrooms)
pvt_table <- summarise(pvt_table, avg.price = mean(Price), avg.sqft = mean(SqFt))
pvt_table
pvt_table <- group_by(hp, Neighborhood, Brick, Bathrooms)
pvt_table <- summarise(pvt_table, avg.price = mean(Price), avg.sqft = mean(SqFt))
pvt_table
pvt_table <- group_by(hp, Neighborhood)
pvt_table <- summarise(pvt_table, avg.price = mean(Price), avg.sqft = mean(SqFt))
pvt_table
pvt_table<- filter(hp, Price > 99999)
pvt_table <- group_by(pvt_table, Neighborhood, Brick)
pvt_table <- summarise(pvt_table, avg.price = mean(Price),
price.cv = sd(Price) / mean(Price),
sqft.avg = mean(SqFt),
price.per.sqft = sum(Price) / sum(SqFt))
pvt_table
knitr::kable(pvt_table)
NPV.1 <- function(rates, cashflows){}
NPV.1 <- function(rates, cashflows){
NPV <- sum(cashflows * (1 + rates)^(seq_along(cashflows) - 1))
return(NPV)}
cash = [1000, -100, -100, -100, -100, -400]
cash = c(1000, -100, -100, -100, -100, -400)
rates <- c(0.08, 0.09, 0.1, 0.05, 0.06, 0.05)
NPV.1(rates, cash)
rates <- c(0, 0.09, 0.1, 0.05, 0.06, 0.05)
NPV.1(rates, cash)
NPV <- sum(cashflows / (1 + rates)^(seq_along(cashflows) - 1))
NPV.1 <- function(rates, cashflows){
NPV <- sum(cashflows / (1 + rates)^(seq_along(cashflows) - 1))
return(NPV)}
NPV.1(rates, cash)
rates <- c(0, 0.08, 0.06, 0.04)
cash <- c(-100, 200, 300, 100)
NPV.1(rates, cash)
cash <- c(-100, 200, 300, 10)
NPV.1(rates, cash)
IRR.1 <- function(cashflow, maxiter = 1000){
t <- seq_along(cashflow)
f <- sum(cashflow / (1 + rates)^(t - 1))
return(uniroot(f, c(-1, 1), maxiter = maxiter)$root)
}
IRR.1(cash)
IRR.1 <- function(cashflow, maxiter = 1000){
f <- function(rate) sum(cashflow / (1 + rate)^(t))
return(uniroot(f, c(-1, 1), maxiter = maxiter)$root)
}
IRR.1(cash)
IRR.1 <- function(cashflow, maxiter = 1000){
t <- seq_along(cashflow)
f <- function(rate) sum(cashflow / (1 + rate)^t)
return(uniroot(f, c(-1, 1), maxiter = maxiter)$root)
}
IRR.1(cash)
cash <- c(-150, 3, 3, 3, 3, 3, 3, 3, 103)
IRR.1(cash)
IRR.1 <- function(cashflow, maxiter = 1000){
t <- seq_along(cashflow)
f <- function(rate) (sum(cashflow / (1 + rate)^t))
return(uniroot(f, c(-1, 1), maxiter = maxiter)$root)
}
IRR.1(cash)
help(uniroot)
IRR.1 <- function(cashflow, maxiter = 1000){
t <- seq_along(cashflow)
f <- function(rate) (sum(cashflow / (1 + rate)^t))
return(uniroot(f, lower = -1, upper = 1, maxiter = maxiter)$root)}
IRR.1(cash)
cash
IRR.q
IRR.1
IRR.1(cash, 100)
IRR.1 <- function(cashflows, maxiter = 1000){
t <- seq_along(cashflows)
f <- function(rate) (sum(cashflows / (rate + 1)^t))
root <- unicode(f, c(-1, 1), maxiter = maxiter)$root
return(root)
}
IRR.1(cash)
IRR.1 <- function(cashflows, maxiter = 1000){
t <- seq_along(cashflows)
root <- uniroot(f, c(-1, 1), maxiter = maxiter)$root
return(root)
}
IRR.1(cash)
IRR.1 <- function(cashflows, maxiter = 1000){
t <- seq_along(cashflows)
f <- function(rate) (sum(cashflows / (rate + 1)^t))
root <- uniroot(f, c(-1, 1), maxiter = maxiter)$root
return(root)
}
IRR.1(root)
IRR.1(cash)
IRR.1 <- function(cashflows, maxiter = 1000){
t <- seq_along(cashflows)
f <- function(rate) (sum(cashflows / (rate + 1)^t))
root <- uniroot(f, f.lower = -1, f.upper = 1, maxiter = maxiter)$root
return(root)
}
IRR.1(cash)
NPV.1(c(0.1, 0.05, 0.1, 0.05), c(-10, 5, 6, 100))
help(irr)
IRR.1 <- function(cashflows, maxiter = 1000){
t <- seq_along(cashflows) - 1
f <- function(rate) (sum(cashflows / (rate + 1)^t))
return(uniroot(f, c(-1, 1), maxiter = maxiter)$root)
}
IRR.1(cash)
rates <- c(0.001, 0.002, 0.01)
rates <- c(0, rates)
rates[2] <- -0.001
rates
collateral_periods <- 3
collateral.periods <- 3
collateral.rate <- 0.25
collateral.notional <- 100 * collateral.rate
coupon.rate <- 0.015
cashflows <- rep(collateral.notional * coupon.rate, collateral.periods)
cashflows[collateral.periods] <- cashflows[collateral.periods] + collateral.notional
cashflows
cashflows <- c(0, cashflows)
cashflows
value.1 <- NPV.1(cashflows, rates)
value.1
value.1 <- NPV.1(rates, cashflows)
value.1
bond.rate <- 1.3
IRR.collateral <- notional.collateral * bond.rate
IRR.collateral <- collateral.notional * bond.rate
cashflows.IRR <- cashflows
cashflows.IRR
cashflows.IRR[1] <- -IRR.collateral
collateral.IRR <- IRR.1(cashflows.IRR)
collateral.IRR
rates.IRR <- rates - 0.005
rates
rates.IRR[1] <- 0
rates.IRR
rates
rate.shift <- -0.005
rates.1 <- c(0, rates[-2] + rate.shift)
rates.1
rates[-2]
cashflows
rates
rates[-2]
rates[-2:3]
rates[-2, -3]
rates[c(-2, -3)]
install.packages("pdfetch")
install.packages("xts")
install.packages("zo")
install.packages("zoo")
require(pdfetch)
require(xts)
require(zoo)
help(pdfetch)
EIUIR <- pdfetch_BLS(c("EIUIR", "EIUIR100"))
EIUIR <- pdfetch_BLS(c("EIUIR", "EIUIR100"), 2000, 2016)
EIUIR <- pdfetch_BLS(c("EIUIR", "EIUIR100"), 2000, 2016)
EIUIR <- pdfetch_BLS("EIUIR", 2000, 2016)
install.packages("blsAPI")
EIUIR <- pdfetch_BLS("EIUIR", 2000, 2016)
pdfetch_BLS(c("EIUIR","EIUIR100"), 2005, 2010)
pdfetch_BLS(c("EIUIR","EIUIR100"), 2005, 2010)
