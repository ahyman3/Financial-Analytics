knitr::opts_chunk$set(echo = TRUE)
library(zoo)      #For creating time series objects
library(xts)      #For time series analysis
library(ggplot2)  #For creating graphics
library(plotly)
#The URL for the exchange data data
URL <- "https://turing.manhattan.edu/~wfoote01/finalytics/data/exrates.csv"
#Reading in the exchange rates and omitting the missing data from the
#url provided by turing.manhattan.edu and keeping the dates as characters
exrates <- na.omit(read.csv(url(URL), stringsAsFactors = F))
#Converting the string dates to actual dates
exrates$DATE <- as.Date(exrates$DATE, "%m/%d/%Y")
#Five columns (date, eur2usd, gbp2usd, cny2usd, jpy2usd)
#the data is daily exchange rates
head(exrates)     #Looking at the data
tail(exrates)     #Looking at the end of the data
str(exrates)      #Viewing the structure of the data
#1253 different instances of exchange rates
summary(exrates)  #From 28 Jan 2013 to 26 Jan 2018
# USD to CNY appears to be the most steady
#Using the properties of the natural log to determine
#the percent change in exchange rates
exrates.r <- diff(log(as.matrix(exrates[,-1]))) * 100
head(exrates.r)   #first 6 days of percent change
tail(exrates.r)   #last 6 days of percent change
str(exrates.r)    #Shows there are 4 columns with 1252 instances
#creating a matrix for the volatility of the exchange markets
size <- na.omit(abs(exrates.r))
head(size)        #viewing the first 6 rows of the size matrix
#Creating a vector of names for the matrix that has the same name as
#the exrates matrix, but with ".size" appended at the end
colnames(size) <- paste(colnames(size), ".size", sep = "")
#viewing the first six rows exchange rates size matrix
head(size)
#Creating an empty matrix with the dimensions of exrates.r
direction <- exrates.r
direction[exrates.r > 0] <- 1     #setting the matrix > 0 = 1
direction[exrates.r < 0] <- -1    #setting the matrix > 0 = -1
direction[exrates.r == 0] <- 0    #setting the matrix == 0 = 0
#setting the column names to the exchange market with ".dir" appended
colnames(direction) <- paste(colnames(exrates.r), ".dir", sep = "")
#Converting into a time series object
#Vector of only dates
#removing the first index of the dates because of the diff function
dates <- exrates$DATE[-1]
#Creating a matrix that has has the percent change, absolute value
#of the percent change, and the whether the foreign exchange
#appreciated, depreciated, or stayed the same
values <- cbind(exrates.r, size, direction)
#Creating the data frame with the dates, returns, size, and direction
exrates.df = data.frame(dates = dates, returns = exrates.r,
size = size, direction = direction)
#Viewing structure of the data to ensure all is looking normal
str(exrates.df)
#Converts the matrix into a time series object
exrates.xts  <- na.omit(as.xts(values, dates))
#Viewing the structure of the time series to make sure nothing is wrong
str(exrates.xts)
#converting from the xts object to a zooreg object
exrates.zr <- na.omit(as.zooreg(exrates.xts))
#Looking at the structure of the of the zooreg object
str(exrates.zr)
#Creates the title for the the plot
title.chg <- "Exchange Rates Percent Change"
#Creating the ggplot object for the percent change with a y-limit of -5% to 5%
#for each of the four foreign exchange market
p1 <- autoplot.zoo(exrates.zr[,1:4]) + ggtitle(title.chg) + ylim(-5,5)
#Displays an interactive plot for the ggplot object created above
ggplotly(p1)
#Sets a title for the size plot
title.size <- "Absolute Value of Percent Change"
#Creates a ggplot object for the size of the the change with the y limit
#from 0 to 5
p2 <- autoplot.zoo(exrates.zr[,5:8]) + ggtitle(title.size) + ylim(0,5)
#Creates the title for the the plot
title.chg <- "Exchange Rates Percent Change"
#Creating the ggplot object for the percent change with a y-limit of -5% to 5%
#for each of the four foreign exchange market
p1 <- autoplot.zoo(exrates.zr[,1:4]) + ggtitle(title.chg) + ylim(-5,5)
#Displays an interactive plot for the ggplot object created above
ggplotly(p1)
#Sets a title for the size plot
title.size <- "Absolute Value of Percent Change"
#Creates a ggplot object for the size of the the change with the y limit
#from 0 to 5
p2 <- autoplot.zoo(exrates.zr[,5:8]) + ggtitle(title.size) + ylim(0,5)
getwd()
setwd("/Users/alexhyman/")
list.dirs()
#loading the data
source("/Users/alexhyman/Documents/Syracuse/Current Classes/Financial Analytics/Project 1/data_moments.R")
acf(coredata(exrates.zr[,1:4]), max.lag = 20)
acf(coredata(exrates.zr[,1:4]), lag.max = 20)
acf(coredata(exrates.xts[,1:4]), lag.max = 20)
?acf
#Creating an autocorrelation matrix
acf(coredata(exrates.xts[,1:4]), lag.max = 25)
#Creating an autocorrelation matrix
acf(coredata(exrates.xts[,1:4]))
#Creating an autocorrelation matrix for each market
auto <- acf(coredata(exrates.xts[,1:4]))
auto$acf
#Creating an autocorrelation matrix for each market
#The diagonal is shows the memory betw
auto <- acf(coredata(exrates.xts[,1:4]), ci.color = "red")
?acf
#Creating an autocorrelation matrix for each market
#The diagonal is shows the memory betw
auto <- acf(coredata(exrates.xts[,1:4]))
auto
#Creating an autocorrelation matrix for each market
#The diagonal is shows the memory betw
acf(coredata(exrates.xts[,1:4]))
#Creating an autocorrelation matrix for each market
#The diagonal is shows the memory in the past for the same market
#The x-axis is the amount of lag
#If x-axis is negative, the exchange market that is listed first
#in the title is the exchange market that is being lagged
acf(coredata(exrates.xts[,1:4]))
acf(coredata(exrates.xts[,5:8]))
acf(coredata(exrates.xts[,5:7]))
acf(coredata(exrates.xts[,c("USD.EUR.size", "USD.GBP.size", "USD.JPY.size")]))
acf(coredata(exrates.xts[,5:8]))
acf(coredata(exrates.xts[,5:7]))
pacf(coredata(exrates.xts[,1:4]))
pacf(coredata(exrates.xts[,1:4]))
#Creates the title for the the plot
title.chg <- "Exchange Rates Percent Change"
#Creating the ggplot object for the percent change with a y-limit of -5% to 5%
#for each of the four foreign exchange market
p1 <- autoplot.zoo(exrates.zr[,1:4]) + ggtitle(title.chg) + ylim(-5,5)
#Displays an interactive plot for the ggplot object created above
ggplotly(p1)
#Sets a title for the size plot
title.size <- "Absolute Value of Percent Change"
#Creates a ggplot object for the size of the the change with the y limit
#from 0 to 5
p2 <- autoplot.zoo(exrates.zr[,5:8]) + ggtitle(title.size) + ylim(0,5)
?ach
?acf
a <- c(1,2,3,4,5,6,7)
pacf(coredata(exrates.xts[,5:7]))
getwd()
#loading the source of the data_moments function created in project 1
source("/Users/alexhyman/Documents/Syracuse/Current Classes/Financial Analytics/
Project 1/data_moments.R")
setwd("/Users/alexhyman/Documents/Syracuse/Current Classes/Financial Analytics/Project 1/")
list.files()
#loading the source of the data_moments function created in project 1
source("/Users/alexhyman/Documents/Syracuse/Current Classes/Financial Analytics/Project 1/data_moments.R")
answer <- data_moments(exrates.xts[,5:8])
install.packages("moments")
answer <- data_moments(exrates.xts[,5:8])
knitr::kable(answer, digits = 4)
data_moments <- function(data) {
library(moments)
library(matrixStats)
mean.r <- colMeans(data)
median.r <- colMedians(data)
sd.r <- colSds(data)
IQR.r <- colIQRs(data)
skewness.r <- skewness(data)
kurtosis.r <- kurtosis(data)
result <- data.frame(mean = mean.r,
median = median.r, std_dev = sd.r,
IQR = IQR.r, skewness = skewness.r,
kurtosis = kurtosis.r)
return(result)
}
answer <- data_moments(exrates.xts[,5:8])
install.packages("matrixStats")
answer <- data_moments(exrates.xts[,5:8])
knitr::kable(answer, digits = 4)
?iqr
?matrixStats
pacf(coredata(exrates.xts[,5:7]))
mean(exrates.xts[, 4])
mean(exrates.xts[, 1:4])
colMeans(exrates.xts[, 1:4])
exrates.tol.pct <- 0.95
exrates.tol <- quantile(exrates.df$returns.USD.EUR,
exrates.tol.pct)
exrates.tol.label <- paste("Tolerable Rate = ",
round(exrates.tol, 2), "%", sep = "")
p <- ggplot(exrates.df, aes(returns.USD.EUR,
fill = direction.USD.EUR.dir)) +
stat_ecdf(colour = "blue", size = 0.75) +
geom_vline(xintercept = exrates.tol,
colour = "red", size = 1.5) +
annotate("text", x = exrates.tol +
1, y = 0.75, label = exrates.tol.label,
colour = "darkred")
p
one <- ts(exrates.df$returns.USD.EUR)
two <- ts(exrates.df$returns.USD.GBP)
# or
one <- ts(exrates.zr[, 1])
two <- ts(exrates.zr[, 2])
ccf(one, two, main = "GBP vs. EUR", lag.max = 20,
xlab = "", ylab = "", ci.col = "red")
# build function to repeat these
# routines
run_ccf <- function(one, two, main = "one vs. two",
lag = 20, color = "red") {
# one and two are equal length series
# main is title lag is number of lags
# in cross-correlation color is color
# of dashed confidence interval
# bounds
stopifnot(length(one) == length(two))
one <- ts(one)
two <- ts(two)
main <- main
lag <- lag
color <- color
ccf(one, two, main = main, lag.max = lag,
xlab = "", ylab = "", ci.col = color)
# end run_ccf
}
one <- ts(exrates.df$returns.USD.EUR)
two <- ts(exrates.df$returns.USD.GBP)
# or
one <- exrates.zr[, 1]
two <- exrates.zr[, 2]
title <- "EUR vs. GBP"
run_ccf(one, two, main = title, lag = 20,
color = "red")
# now for volatility (sizes)
one <- ts(abs(exrates.zr[, 1]))
two <- ts(abs(exrates.zr[, 2]))
title <- "EUR vs. GBP: volatility"
run_ccf(one, two, main = title, lag = 20,
color = "red")
corr_rolling <- function(x) {
dim <- ncol(x)
corr_r <- cor(x)[lower.tri(diag(dim),
diag = FALSE)]
return(corr_r)
}
vol_rolling <- function(x) {
library(matrixStats)
vol_r <- colSds(x)
return(vol_r)
}
ALL.r <- exrates.xts[, 1:4]
window <- 90  #reactive({input$window})
corr_r <- rollapply(ALL.r, width = window,
corr_rolling, align = "right", by.column = FALSE)
colnames(corr_r) <- c("EUR.GBP", "EUR.CNY",
"EUR.JPY", "GBP.CNY", "GBP.JPY",
"CNY.JPY")
vol_r <- rollapply(ALL.r, width = window,
vol_rolling, align = "right", by.column = FALSE)
colnames(vol_r) <- c("EUR.vol", "GBP.vol",
"CNY.vol", "JPY.vol")
year <- format(index(corr_r), "%Y")
r_corr_vol <- merge(ALL.r, corr_r, vol_r,
year)
install.packages("quantreg")
library(quantreg)
taus <- seq(0.05, 0.95, 0.05)  # Roger Koenker UIC Bob Hogg and Allen Craig
fit.rq.CNY.JPY <- rq(log(CNY.JPY) ~ log(JPY.vol),
tau = taus, data = r_corr_vol)
fit.lm.CNY.JPY <- lm(log(CNY.JPY) ~ log(JPY.vol),
data = r_corr_vol)
# Some test statements
CNY.JPY.summary <- summary(fit.rq.CNY.JPY,
se = "boot")
CNY.JPY.summary
plot(CNY.JPY.summary)
install.packages("magick")
library(quantreg)
library(magick)
img <- image_graph(res = 96)
datalist <- split(r_corr_vol, r_corr_vol$year)
out <- lapply(datalist, function(data) {
p <- ggplot(data, aes(JPY.vol, CNY.JPY)) +
geom_point() + ggtitle(data$year) +
geom_quantile(quantiles = c(0.05,
0.95)) + geom_quantile(quantiles = 0.5,
linetype = "longdash") + geom_density_2d(colour = "red")
print(p)
})
while (!is.null(dev.list())) dev.off()
# img <-
# image_background(image_trim(img),
# 'white')
animation <- image_animate(img, fps = 0.5)
animation
